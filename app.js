// Decode base64 data into binary
import pako from 'pako';
import fs from 'fs';
function decompressTheData(basestring){
let base64Data = basestring

let binaryData = atob(base64Data);
// Convert binary data to ArrayBuffer
let arrayBuffer = new ArrayBuffer(binaryData.length);
let uint8Array = new Uint8Array(arrayBuffer);
for (let i = 0; i < binaryData.length; i++) {
    uint8Array[i] = binaryData.charCodeAt(i);
}

// Decompress the ArrayBuffer using the appropriate algorithm
let decompressedData;
try {
    // Try gzip decompression
    decompressedData = pako.inflate(uint8Array, { to: 'string' });
} catch (error) {
    try {
        // If gzip fails, try deflate decompression
        decompressedData = pako.inflateRaw(uint8Array, { to: 'string' });

    } catch (error) {
        try {
            // If deflate fails, try brotli decompression
            decompressedData = pako.inflate(uint8Array, { to: 'string' });
        } catch (error) {
            console.error("Error decompressing data:", error);
        }
    }
}
return decompressedData;
}

const data = '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'
const a = decompressTheData(data)
console.log(a)
fs.writeFile('categories.json',a,(err)=>{})
// Now you can use the decompressedData as needed
export default decompressTheData;



